# Dynmaic auto-generated nginx conf {{ $infix := "" }} {{ $autoRedirectEnabled := "0" }} {{ $prefix := "" }} {{ $sslForce := "1" }} {{ $sslRedirectPort := or (.Env.GLOB_SSL_REDIRECT_PORT) ((where (where $ "IP" .Env.PROXY_IP | first).Addresses "Port" "443" | first).HostPort) "443" }} {{ $spdyEnabled := "0" }} {{ $allowHttp := "0" }} {{ $port := "none" }} {{ $upIdleConnections := "0" }} {{ $enableWildCors := "0" }} {{ $secLimitConsPerIp := .Env.GLOB_LIMIT_CONS_PER_IP }} {{ $secLimitReqsBurst := .Env.GLOB_LIMIT_REQS_BURST }} {{ $infix := .Env.GLOB_SSL_CERT_BUNDLE_INFIX }} {{ $autoRedirectEnabled := .Env.GLOB_AUTO_REDIRECT_ENABLED }} {{ $prefix := .Env.GLOB_AUTO_REDIRECT_PREFIX }} {{ $spdyEnabled := .Env.GLOB_SPDY_ENABLED }} {{ $unavailableService := .Env.GLOB_HTTP_NO_SERVICE }} {{ $autoRedirectDirection := .Env.GLOB_AUTO_REDIRECT_DIRECTION }} {{ $sslSessionTimeout := .Env.GLOB_SSL_SESSION_TIMEOUT }} {{ $sslSessionCache := .Env.GLOB_SSL_SESSION_CACHE }} {{ $sslForce := .Env.GLOB_SSL_FORCE }} {{ $allowHttp := .Env.GLOB_ALLOW_HTTP_FALLBACK }} {{ $upIdleConnections := .Env.GLOB_UPSTREAM_IDLE_CONNECTIONS }} {{ $sslOcspValidTime := .Env.GLOB_SSL_OCSP_VALID_TIME }} {{ $sslOcspDnsAdresses := .Env.GLOB_SSL_OCSP_DNS_ADDRESSES }} {{ $sslOcspDnsTimeout := .Env.GLOB_SSL_OCSP_DNS_TIMEOUT }} {{ $enableWildCors := .Env.GLOB_WILD_CORS }}
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}
map $http_upgrade $proxy_connection {
  default upgrade;
  '' close;
}

gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
log_format vhost '$host $remote_addr - $remote_user [$time_local] '
                 '"$request" $status $body_bytes_sent '
                 '"$http_referer" "$http_user_agent"';
access_log off;
error_log /proc/self/fd/2;
client_max_body_size {{ .Env.GLOB_MAX_BODY_SIZE }};
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;

server {
        listen 80;
        server_name _;
        return {{ $unavailableService }};
} {{ range $hostAndPort, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }} {{ $hostAndPortArray := split $hostAndPort ":" }} {{ $host := first $hostAndPortArray }} {{ $path := replace $hostAndPort $host "" 1 }} {{ $hostAndPortLen := len $hostAndPortArray }} {{ if gt $hostAndPortLen 1 }} {{ $port := last $hostAndPortArray }} {{ $port := first ( split $port "/" ) }} {{ $path := replace $path $port "" 1 }} {{ $path := replace $path ":" "" 1 }} {{ end }}
upstream {{ $host }} { {{ range $container := $containers }} {{ $addrLen := len $container.Addresses }} {{ if eq $addrLen 1 }} {{ with $address := index $container.Addresses 0 }}
    server {{ $address.IP }}:{{ $address.Port }}{{ $path }}; {{ end }} {{ else if ne $port "none" }} {{ range $address := .Addresses }} {{ if eq $address.Port $port }}
    server {{ $address.IP }}:{{ $address.Port }}{{ $path }}; {{ end }} {{ end }} {{ else if $container.Env.VIRTUAL_PORT }} {{ range $address := .Addresses }} {{ if eq $address.Port $container.Env.VIRTUAL_PORT }}
    server {{ $address.IP }}:{{ $address.Port }}{{ $path }}; {{ end }} {{ end }} {{ else }} {{ $foundhttp := "false" }} {{ range $address := $container.Addresses }} {{ if eq $address.Port "80" }}
    server {{ $address.IP }}:{{ $address.Port }}{{ $path }}; {{ end }} {{ end }} {{ end }} {{ if ne $upIdleConnections "0" }} 
    keepalive {{ $upIdleConnections }}; {{ end }} {{ end }}
} {{ $proto := or (first (groupByKeys $containers "Env.VIRTUAL_PROTO")) "http" }} {{ $certName := (first (groupByKeys $containers "Env.CERT_NAME")) }} {{ $vhostCert := (closest (dir "/etc/nginx/certs") (printf "%s.crt" $host))}} {{ $vhostCert := replace $vhostCert ".crt" "" -1 }} {{ $vhostCert := replace $vhostCert ".key" "" -1 }} {{ $cert := (coalesce $certName $vhostCert) }} {{ $sslForce := or (first (groupByKeys $containers "Env.VIRTUAL_SSL_FORCE")) $sslForce }} {{ $origins := or (first (groupByKeys $containers "Env.VIRTUAL_ORIGINS")) "null" }} {{ if (and (ne $cert "") (exists (printf "/etc/nginx/certs/%s.crt" $cert)) (exists (printf "/etc/nginx/certs/%s.key" $cert))) }} {{ if eq $autoRedirectEnabled "1" }}
server { {{ if eq $autoRedirectDirection "0" }}    
    server_name  {{ $prefix }}.{{ $host }};
    listen 443 ssl;
    rewrite ^(.*) http://{{ $host }}$1 permanent; {{ else }}
    server_name {{ $host }};
    listen 443 ssl;
    rewrite ^(.*) http://{{ $prefix }}.{{ $host }}$1 permanent; {{ end }}
} {{ end }} {{ if eq $sslForce "1" }}
server {
    set $sslRedirectPort {{ if $sslRedirectPort }}:{{$sslRedirectPort}}{{else}}:443{{end}};
    server_name {{ $host }};
    return 301 https://$server_name$sslRedirectPort$request_uri;
} {{ else }}
server {
    server_name {{ $host }};
    listen 80; {{ if eq $enableWildCors "1" }}
    add_header Access-Control-Allow-Origin *; {{ else }}  {{ if ne $origins "null" }}
    add_header Access-Control-Allow-Origin {{ $origins }}; {{ end }} {{ end }}
    location ~* \.(jpe?g|png|gif|css|ico|js|svg)$ {
        proxy_pass {{ $proto }}://{{ $host }};
    }
    location / {
        proxy_pass {{ $proto }}://{{ $host }}; {{ if (exists (printf "/etc/nginx/htpasswd/%s" $host)) }}
        auth_basic "Provide authentication for {{ $host }}";
        auth_basic_user_file {{ (printf "/etc/nginx/htpasswd/%s" $host) }}; {{ end }}
        limit_conn perip {{ $secLimitConsPerIp }};
        limit_req zone=persec burst={{ $secLimitReqsBurst }};
    }
} {{ end }}
server {
    server_name {{ $host }}; {{ if eq $spdyEnabled "1" }}
    listen 443 ssl spdy; {{ else }}
    listen 443 ssl; {{ end }}
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:ECDHE-RSA-RC4-SHA;
    ssl_prefer_server_ciphers on;{{ if ne $sslOcspValidTime "0" }}
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver {{ $sslOcspDnsAdresses }} valid={{ $sslOcspValidTime }};
    resolver_timeout {{ $sslOcspDnsTimeout }}; {{ end }}
    ssl_session_timeout {{ $sslSessionTimeout }};
    ssl_session_cache shared:SSL:{{ $sslSessionCache }}; {{ $certBundle := replace "ccii" "cc" $cert -1 }} {{ $certBundle := replace $certBundle "ii" $infix -1 }}
    ssl_certificate /etc/nginx/certs/{{ (printf "%s.crt" $certBundle) }};
    ssl_certificate_key /etc/nginx/certs/{{ (printf "%s.key" $cert) }}; {{ if (exists (printf "/etc/nginx/certs/%s.dhparam.pem" $cert)) }}
    ssl_dhparam {{ printf "/etc/nginx/certs/%s.dhparam.pem" $cert }}; {{ end }} {{ if eq $spdyEnabled "1" }} 
    add_header Alternate-Protocol  443:npn-spdy/3; {{ end }}
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains"; {{ if eq $enableWildCors "1" }}
    add_header Access-Control-Allow-Origin *; {{ else }}  {{ if ne $origins "null" }}
    add_header Access-Control-Allow-Origin {{ $origins }}; {{ end }} {{ end }}
    add_header X-Content-Type-Options nosniff; {{ if (exists (printf "/etc/nginx/vhost.d/%s" $host)) }} 
    add_header X-Frame-Options ALLOW; 
    include {{ printf "/etc/nginx/vhost.d/%s" $host }}; {{ end }}
    location ~* \.(jpe?g|png|gif|css|ico|js|svg)$ {
        proxy_pass {{ $proto }}://{{ $host }};
    }
    location / {
        proxy_pass {{ $proto }}://{{ $host }}; {{ if (exists (printf "/etc/nginx/htpasswd/%s" $host)) }}
        auth_basic "Provide authentication for {{ $host }}";
        auth_basic_user_file {{ (printf "/etc/nginx/htpasswd/%s" $host) }}; {{ end }}
        limit_conn perip {{ $secLimitConsPerIp }};
        limit_req zone=persec burst={{ $secLimitReqsBurst }};
    }
} {{ else }} {{ if eq $autoRedirectEnabled "1" }}
server { {{ if eq $autoRedirectDirection "0" }}
    server_name  {{ $prefix }}.{{ $host }};
    rewrite ^(.*) http://{{ $host }}$1 permanent; {{ else }}
    server_name {{ $host }};
    rewrite ^(.*) http://{{ $prefix }}.{{ $host }}$1 permanent; {{ end }}
} {{ end }}
server { {{ if $.Env.DEFAULT_HOST }} {{ if eq $.Env.DEFAULT_HOST $host }}
    listen 80 default_server;
    server_name {{ $host }}; {{ else }}
    server_name {{ $host }}; {{ end }} {{ else }}
    server_name {{ $host }}; {{ end }} {{ if (exists (printf "/etc/nginx/vhost.d/%s" $host)) }} {{ if eq $enableWildCors "1" }}
    add_header Access-Control-Allow-Origin *; {{ else }}  {{ if ne $origins "null" }}
    add_header Access-Control-Allow-Origin {{ $origins }}; {{ end }} {{ end }}
    include {{ printf "/etc/nginx/vhost.d/%s" $host }}; {{ end }}
    location ~* \.(jpe?g|png|gif|css|ico|js)$ {
        proxy_pass {{ $proto }}://{{ $host }};
    }
    location / {
            proxy_pass {{ $proto }}://{{ $host }}; {{ if (exists (printf "/etc/nginx/htpasswd/%s" $host)) }}
            auth_basic "Provide authentication for {{ $host }}";
            auth_basic_user_file {{ (printf "/etc/nginx/htpasswd/%s" $host) }}; {{ end }}
            limit_conn perip {{ $secLimitConsPerIp }};
            limit_req zone=persec burst={{ $secLimitReqsBurst }};
    }
} {{ if (and (exists "/etc/nginx/certs/default.crt") (exists "/etc/nginx/certs/default.key")) }}
server {
    server_name {{ $host }};
    listen 443 ssl;
    return {{ $unavailableService }};
    ssl_certificate /etc/nginx/certs/default.crt;
    ssl_certificate_key /etc/nginx/certs/default.key;
} {{ end }} {{ end }} {{ end }}
